{"version":3,"file":"datepicker-input.js","sourceRoot":"","sources":["../../src/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  Input,\r\n  ComponentRef,\r\n  ElementRef,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  ComponentFactoryResolver,\r\n  NgZone,\r\n  TemplateRef,\r\n  forwardRef,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {AbstractControl, ControlValueAccessor, Validator, NG_VALUE_ACCESSOR, NG_VALIDATORS} from '@angular/forms';\r\n\r\nimport {NgbDate} from './ngb-date';\r\nimport {NgbDatepicker, NgbDatepickerNavigateEvent} from './datepicker';\r\nimport {DayTemplateContext} from './datepicker-day-template-context';\r\nimport {NgbDateParserFormatter} from './ngb-date-parser-formatter';\r\n\r\nimport {positionElements, PlacementArray} from '../util/positioning';\r\nimport {NgbDateStruct} from './ngb-date-struct';\r\nimport {NgbDateAdapter} from './ngb-date-adapter';\r\nimport {NgbCalendar} from './ngb-calendar';\r\nimport {NgbDatepickerService} from './datepicker-service';\r\n\r\nconst NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbInputDatepicker),\r\n  multi: true\r\n};\r\n\r\nconst NGB_DATEPICKER_VALIDATOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NgbInputDatepicker),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A directive that makes it possible to have datepickers on input fields.\r\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\r\n */\r\n@Directive({\r\n  selector: 'input[ngbDatepicker]',\r\n  exportAs: 'ngbDatepicker',\r\n  host: {\r\n    '(input)': 'manualDateChange($event.target.value)',\r\n    '(change)': 'manualDateChange($event.target.value, true)',\r\n    '(keyup.esc)': 'close()',\r\n    '(blur)': 'onBlur()',\r\n    '[disabled]': 'disabled'\r\n  },\r\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NGB_DATEPICKER_VALIDATOR, NgbDatepickerService]\r\n})\r\nexport class NgbInputDatepicker implements OnChanges,\r\n    OnDestroy, ControlValueAccessor, Validator {\r\n  private _cRef: ComponentRef<NgbDatepicker> = null;\r\n  private _disabled = false;\r\n  private _model: NgbDate;\r\n  private _zoneSubscription: any;\r\n\r\n  /**\r\n   * Reference for the custom template for the day display\r\n   */\r\n  @Input() dayTemplate: TemplateRef<DayTemplateContext>;\r\n\r\n  /**\r\n   * Number of months to display\r\n   */\r\n  @Input() displayMonths: number;\r\n\r\n  /**\r\n  * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\r\n   */\r\n  @Input() firstDayOfWeek: number;\r\n\r\n  /**\r\n   * Callback to mark a given date as disabled.\r\n   * 'Current' contains the month that will be displayed in the view\r\n   */\r\n  @Input() markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\r\n\r\n  /**\r\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\r\n   */\r\n  @Input() minDate: NgbDateStruct;\r\n\r\n  /**\r\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\r\n   */\r\n  @Input() maxDate: NgbDateStruct;\r\n\r\n  /**\r\n   * Navigation type: `select` (default with select boxes for month and year), `arrows`\r\n   * (without select boxes, only navigation arrows) or `none` (no navigation at all)\r\n   */\r\n  @Input() navigation: 'select' | 'arrows' | 'none';\r\n\r\n  /**\r\n   * The way to display days that don't belong to current month: `visible` (default),\r\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\r\n   */\r\n  @Input() outsideDays: 'visible' | 'collapsed' | 'hidden';\r\n\r\n  /**\r\n      * Placement of a datepicker popup accepts:\r\n      *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\r\n      *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\r\n      * and array of above values.\r\n      */\r\n  @Input() placement: PlacementArray = 'bottom-left';\r\n\r\n  /**\r\n   * Whether to display days of the week\r\n   */\r\n  @Input() showWeekdays: boolean;\r\n\r\n  /**\r\n   * Whether to display week numbers\r\n   */\r\n  @Input() showWeekNumbers: boolean;\r\n\r\n  /**\r\n   * Date to open calendar with.\r\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n   * If nothing or invalid date provided, calendar will open with current month.\r\n   * Use 'navigateTo(date)' as an alternative\r\n   */\r\n  @Input() startDate: {year: number, month: number};\r\n\r\n  /**\r\n   * A selector specifying the element the datepicker popup should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n  @Input() container: string;\r\n\r\n  /**\r\n   * Whether to auto close on date select. Defaults to true\r\n   */\r\n  @Input() autoClose: boolean;\r\n\r\n  /**\r\n   * An event fired when navigation happens and currently displayed month changes.\r\n   * See NgbDatepickerNavigateEvent for the payload info.\r\n   */\r\n  @Output() navigate = new EventEmitter<NgbDatepickerNavigateEvent>();\r\n\r\n  @Input()\r\n  get disabled() {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: any) {\r\n    this._disabled = value === '' || (value && value !== 'false');\r\n\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.setDisabledState(this._disabled);\r\n    }\r\n  }\r\n\r\n  private _onChange = (_: any) => {};\r\n  private _onTouched = () => {};\r\n  private _validatorChange = () => {};\r\n\r\n\r\n  constructor(\r\n      private _parserFormatter: NgbDateParserFormatter, private _elRef: ElementRef, private _vcRef: ViewContainerRef,\r\n      private _renderer: Renderer2, private _cfr: ComponentFactoryResolver, ngZone: NgZone,\r\n      private _service: NgbDatepickerService, private _calendar: NgbCalendar,\r\n      private _ngbDateAdapter: NgbDateAdapter<any>) {\r\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\r\n      if (this._cRef) {\r\n        positionElements(\r\n            this._elRef.nativeElement, this._cRef.location.nativeElement, this.placement, this.container === 'body');\r\n      }\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this._onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this._onTouched = fn; }\r\n\r\n  registerOnValidatorChange(fn: () => void): void { this._validatorChange = fn; };\r\n\r\n  setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    const value = c.value;\r\n\r\n    if (value === null || value === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const ngbDate = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\r\n\r\n    if (!this._calendar.isValid(ngbDate)) {\r\n      return {'ngbDate': {invalid: c.value}};\r\n    }\r\n\r\n    if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\r\n      return {'ngbDate': {requiredBefore: this.minDate}};\r\n    }\r\n\r\n    if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\r\n      return {'ngbDate': {requiredAfter: this.maxDate}};\r\n    }\r\n  }\r\n\r\n  writeValue(value) {\r\n    this._model = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\r\n    this._writeModelValue(this._model);\r\n  }\r\n\r\n  manualDateChange(value: string, updateView = false) {\r\n    this._model = this._fromDateStruct(this._parserFormatter.parse(value));\r\n    this._onChange(this._model ? this._ngbDateAdapter.toModel(this._model) : (value === '' ? null : value));\r\n    if (updateView && this._model) {\r\n      this._writeModelValue(this._model);\r\n    }\r\n  }\r\n\r\n  isOpen() { return !!this._cRef; }\r\n\r\n  /**\r\n   * Opens the datepicker with the selected date indicated by the ngModel value.\r\n   */\r\n  open() {\r\n    if (!this.isOpen()) {\r\n      const cf = this._cfr.resolveComponentFactory(NgbDatepicker);\r\n      this._cRef = this._vcRef.createComponent(cf);\r\n\r\n      this._applyPopupStyling(this._cRef.location.nativeElement);\r\n      this._applyDatepickerInputs(this._cRef.instance);\r\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\r\n      this._cRef.instance.ngOnInit();\r\n      this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(this._model));\r\n\r\n      // date selection event handling\r\n      this._cRef.instance.registerOnChange((selectedDate) => {\r\n        this.writeValue(selectedDate);\r\n        this._onChange(selectedDate);\r\n\r\n        if (this.autoClose) {\r\n          this.close();\r\n        }\r\n      });\r\n\r\n      // focus handling\r\n      this._cRef.instance.focus();\r\n\r\n      this._cRef.instance.setDisabledState(this.disabled);\r\n\r\n      if (this.container === 'body') {\r\n        window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the datepicker popup.\r\n   */\r\n  close() {\r\n    if (this.isOpen()) {\r\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\r\n      this._cRef = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the datepicker popup (opens when closed and closes when opened).\r\n   */\r\n  toggle() {\r\n    if (this.isOpen()) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigates current view to provided date.\r\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n   * If nothing or invalid date provided calendar will open current month.\r\n   * Use 'startDate' input as an alternative\r\n   */\r\n  navigateTo(date?: {year: number, month: number}) {\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.navigateTo(date);\r\n    }\r\n  }\r\n\r\n  onBlur() { this._onTouched(); }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['minDate'] || changes['maxDate']) {\r\n      this._validatorChange();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._zoneSubscription.unsubscribe();\r\n  }\r\n\r\n  private _applyDatepickerInputs(datepickerInstance: NgbDatepicker): void {\r\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\r\n     'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\r\n        .forEach((optionName: string) => {\r\n          if (this[optionName] !== undefined) {\r\n            datepickerInstance[optionName] = this[optionName];\r\n          }\r\n        });\r\n    datepickerInstance.startDate = this.startDate || this._model;\r\n  }\r\n\r\n  private _applyPopupStyling(nativeElement: any) {\r\n    this._renderer.addClass(nativeElement, 'dropdown-menu');\r\n    this._renderer.setStyle(nativeElement, 'padding', '0');\r\n  }\r\n\r\n  private _subscribeForDatepickerOutputs(datepickerInstance: NgbDatepicker) {\r\n    datepickerInstance.navigate.subscribe(date => this.navigate.emit(date));\r\n    datepickerInstance.select.subscribe(() => {\r\n      if (this.autoClose) {\r\n        this.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _writeModelValue(model: NgbDate) {\r\n    this._renderer.setProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(model));\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  private _fromDateStruct(date: NgbDateStruct): NgbDate {\r\n    const ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\r\n    return this._calendar.isValid(ngbDate) ? ngbDate : null;\r\n  }\r\n}\r\n"]}