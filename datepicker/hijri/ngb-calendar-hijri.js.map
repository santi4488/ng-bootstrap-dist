{"version":3,"file":"ngb-calendar-hijri.js","sourceRoot":"","sources":["../../../src/datepicker/hijri/ngb-calendar-hijri.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgbDate} from '../ngb-date';\r\nimport {NgbPeriod, NgbCalendar} from '../ngb-calendar';\r\nimport {Injectable} from '@angular/core';\r\nimport {isNumber} from '../../util/util';\r\n\r\n@Injectable()\r\nexport abstract class NgbCalendarHijri extends NgbCalendar {\r\n  getDaysPerWeek() { return 7; }\r\n\r\n  getMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\r\n\r\n  getWeeksPerMonth() { return 6; }\r\n\r\n  isValid(date: NgbDate): boolean {\r\n    return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\r\n        !isNaN(this.toGregorian(date).getTime());\r\n  }\r\n\r\n  setDay(date: NgbDate, day: number): NgbDate {\r\n    day = +day;\r\n    let mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n    if (day <= 0) {\r\n      while (day <= 0) {\r\n        date = this.setMonth(date, date.month - 1);\r\n        mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n        day += mDays;\r\n      }\r\n    } else if (day > mDays) {\r\n      while (day > mDays) {\r\n        day -= mDays;\r\n        date = this.setMonth(date, date.month + 1);\r\n        mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n      }\r\n    }\r\n    date.day = day;\r\n    return date;\r\n  }\r\n\r\n  setMonth(date: NgbDate, month: number): NgbDate {\r\n    month = +month;\r\n    date.year = date.year + Math.floor((month - 1) / 12);\r\n    date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n    return date;\r\n  }\r\n\r\n  setYear(date: NgbDate, yearValue: number): NgbDate {\r\n    date.year = +yearValue;\r\n    return date;\r\n  }\r\n\r\n  abstract getWeekday(date: NgbDate): number;\r\n\r\n  abstract getNext(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\r\n\r\n  abstract getPrev(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\r\n\r\n  abstract getWeekNumber(week: NgbDate[], firstDayOfWeek: number): number;\r\n\r\n  abstract getToday(): NgbDate;\r\n\r\n  /**\r\n   * Returns the equivalent Hijri date value for a give input Gregorian date.\r\n   * `gDate` is s JS Date to be converted to Hijri.\r\n   */\r\n  abstract fromGregorian(gDate: Date): NgbDate;\r\n\r\n  /**\r\n   * Converts the current Hijri date to Gregorian.\r\n   */\r\n  abstract toGregorian(hijriDate: NgbDate): Date;\r\n\r\n  /**\r\n   * Returns the number of days in a specific Hijri month.\r\n   * `month` is 1 for Muharram, 2 for Safar, etc.\r\n   * `year` is any Hijri year.\r\n   */\r\n  abstract getDaysInIslamicMonth(month: number, year: number): number;\r\n\r\n  protected _isIslamicLeapYear(year: number): boolean { return (14 + 11 * year) % 30 < 11; }\r\n\r\n  /**\r\n   * Returns the start of Hijri Month.\r\n   * `month` is 0 for Muharram, 1 for Safar, etc.\r\n   * `year` is any Hijri year.\r\n   */\r\n  protected _getMonthStart(year: number, month: number): number {\r\n    return Math.ceil(29.5 * month) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\r\n  }\r\n\r\n  /**\r\n   * Returns the start of Hijri year.\r\n   * `year` is any Hijri year.\r\n   */\r\n  protected _getYearStart(year: number): number { return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0); }\r\n}\r\n"]}