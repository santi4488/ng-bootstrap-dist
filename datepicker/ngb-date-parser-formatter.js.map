{"version":3,"file":"ngb-date-parser-formatter.js","sourceRoot":"","sources":["../../src/datepicker/ngb-date-parser-formatter.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAC,MAAM,cAAc,CAAC;;;;;;AAQ5D;;;;;AAAA;;;iCARA;IAsBC,CAAA;;;;;;AAdD,kCAcC;AAED,IAAA;IAA+C,6CAAsB;;;;IACnE,yCAAK,GAAL,UAAM,KAAa;QACjB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC;aAChE;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtF,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC;aACnF;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChH,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;aACtG;SACF;QACD,MAAM,CAAC,IAAI,CAAC;KACb;IAED,0CAAM,GAAN,UAAO,IAAmB;QACxB,MAAM,CAAC,IAAI;YACJ,IAAI,CAAC,IAAI,UAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,WAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAE;YACpH,EAAE,CAAC;KACR;oCA3CH;EAwB+C,sBAAsB,EAoBpE,CAAA;AApBD,qCAoBC","sourcesContent":["import {padNumber, toInteger, isNumber} from '../util/util';\r\nimport {NgbDateStruct} from './ngb-date-struct';\r\n\r\n/**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nexport abstract class NgbDateParserFormatter {\r\n  /**\r\n   * Parses the given value to an NgbDateStruct. Implementations should try their best to provide a result, even\r\n   * partial. They must return null if the value can't be parsed.\r\n   * @param value the value to parse\r\n   */\r\n  abstract parse(value: string): NgbDateStruct;\r\n\r\n  /**\r\n   * Formats the given date to a string. Implementations should return an empty string if the given date is null,\r\n   * and try their best to provide a partial result if the given date is incomplete or invalid.\r\n   * @param date the date to format as a string\r\n   */\r\n  abstract format(date: NgbDateStruct): string;\r\n}\r\n\r\nexport class NgbDateISOParserFormatter extends NgbDateParserFormatter {\r\n  parse(value: string): NgbDateStruct {\r\n    if (value) {\r\n      const dateParts = value.trim().split('-');\r\n      if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n        return {year: toInteger(dateParts[0]), month: null, day: null};\r\n      } else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n        return {year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null};\r\n      } else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n        return {year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2])};\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  format(date: NgbDateStruct): string {\r\n    return date ?\r\n        `${date.year}-${isNumber(date.month) ? padNumber(date.month) : ''}-${isNumber(date.day) ? padNumber(date.day) : ''}` :\r\n        '';\r\n  }\r\n}\r\n"]}