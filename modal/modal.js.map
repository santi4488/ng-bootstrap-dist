{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../src/modal/modal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,wBAAwB,EAAC,MAAM,eAAe,CAAC;AAE7E,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;;;;;;IAmD1C,kBACY,UAAoC,EAAU,SAAmB,EAAU,WAA0B;QAArG,eAAU,GAAV,UAAU,CAA0B;QAAU,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAe;KAAI;IAErH;;;;;OAKG;;;;;;;IACH,uBAAI;;;;;;IAAJ,UAAK,OAAY,EAAE,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;QAC9C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KACjF;;gBAbF,UAAU;;;;gBAnDmB,wBAAwB;gBAAlC,QAAQ;gBAEpB,aAAa;;mBAFrB;;SAoDa,QAAQ","sourcesContent":["import {Injectable, Injector, ComponentFactoryResolver} from '@angular/core';\r\n\r\nimport {NgbModalStack} from './modal-stack';\r\nimport {NgbModalRef} from './modal-ref';\r\n\r\n/**\r\n * Represent options available when opening new modal windows.\r\n */\r\nexport interface NgbModalOptions {\r\n  /**\r\n   * Whether a backdrop element should be created for a given modal (true by default).\r\n   * Alternatively, specify 'static' for a backdrop which doesn't close the modal on click.\r\n   */\r\n  backdrop?: boolean | 'static';\r\n\r\n  /**\r\n   * Function called when a modal will be dismissed.\r\n   * If this function returns false, the modal is not dismissed.\r\n   */\r\n  beforeDismiss?: () => boolean;\r\n\r\n  /**\r\n   * An element to which to attach newly opened modal windows.\r\n   */\r\n  container?: string;\r\n\r\n  /**\r\n   * Injector to use for modal content.\r\n   */\r\n  injector?: Injector;\r\n\r\n  /**\r\n   * Whether to close the modal when escape key is pressed (true by default).\r\n   */\r\n  keyboard?: boolean;\r\n\r\n  /**\r\n   * Size of a new modal window.\r\n   */\r\n  size?: 'sm' | 'lg';\r\n\r\n  /**\r\n   * Custom class to append to the modal window\r\n   */\r\n  windowClass?: string;\r\n}\r\n\r\n/**\r\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\r\n * the \"open\" method!\r\n */\r\n@Injectable()\r\nexport class NgbModal {\r\n  constructor(\r\n      private _moduleCFR: ComponentFactoryResolver, private _injector: Injector, private _modalStack: NgbModalStack) {}\r\n\r\n  /**\r\n   * Opens a new modal window with the specified content and using supplied options. Content can be provided\r\n   * as a TemplateRef or a component type. If you pass a component type as content than instances of those\r\n   * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\r\n   * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\r\n   */\r\n  open(content: any, options: NgbModalOptions = {}): NgbModalRef {\r\n    return this._modalStack.open(this._moduleCFR, this._injector, content, options);\r\n  }\r\n}\r\n"]}