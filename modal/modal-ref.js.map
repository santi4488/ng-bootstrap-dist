{"version":3,"file":"modal-ref.js","sourceRoot":"","sources":["../../src/modal/modal-ref.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentRef} from '@angular/core';\r\n\r\nimport {NgbModalBackdrop} from './modal-backdrop';\r\nimport {NgbModalWindow} from './modal-window';\r\n\r\nimport {ContentRef} from '../util/popup';\r\n\r\n/**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nexport class NgbActiveModal {\r\n  /**\r\n   * Can be used to close a modal, passing an optional result.\r\n   */\r\n  close(result?: any): void {}\r\n\r\n  /**\r\n   * Can be used to dismiss a modal, passing an optional reason.\r\n   */\r\n  dismiss(reason?: any): void {}\r\n}\r\n\r\n/**\r\n * A reference to a newly opened modal.\r\n */\r\nexport class NgbModalRef {\r\n  private _resolve: (result?: any) => void;\r\n  private _reject: (reason?: any) => void;\r\n\r\n  /**\r\n   * The instance of component used as modal's content.\r\n   * Undefined when a TemplateRef is used as modal's content.\r\n   */\r\n  get componentInstance(): any {\r\n    if (this._contentRef.componentRef) {\r\n      return this._contentRef.componentRef.instance;\r\n    }\r\n  }\r\n\r\n  // only needed to keep TS1.8 compatibility\r\n  set componentInstance(instance: any) {}\r\n\r\n  /**\r\n   * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\r\n   */\r\n  result: Promise<any>;\r\n\r\n  constructor(\r\n      private _windowCmptRef: ComponentRef<NgbModalWindow>, private _contentRef: ContentRef,\r\n      private _backdropCmptRef?: ComponentRef<NgbModalBackdrop>, private _beforeDismiss?: Function) {\r\n    _windowCmptRef.instance.dismissEvent.subscribe((reason: any) => { this.dismiss(reason); });\r\n\r\n    this.result = new Promise((resolve, reject) => {\r\n      this._resolve = resolve;\r\n      this._reject = reject;\r\n    });\r\n    this.result.then(null, () => {});\r\n  }\r\n\r\n  /**\r\n   * Can be used to close a modal, passing an optional result.\r\n   */\r\n  close(result?: any): void {\r\n    if (this._windowCmptRef) {\r\n      this._resolve(result);\r\n      this._removeModalElements();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Can be used to dismiss a modal, passing an optional reason.\r\n   */\r\n  dismiss(reason?: any): void {\r\n    if (this._windowCmptRef) {\r\n      if (!this._beforeDismiss || this._beforeDismiss() !== false) {\r\n        this._reject(reason);\r\n        this._removeModalElements();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _removeModalElements() {\r\n    const windowNativeEl = this._windowCmptRef.location.nativeElement;\r\n    windowNativeEl.parentNode.removeChild(windowNativeEl);\r\n    this._windowCmptRef.destroy();\r\n\r\n    if (this._backdropCmptRef) {\r\n      const backdropNativeEl = this._backdropCmptRef.location.nativeElement;\r\n      backdropNativeEl.parentNode.removeChild(backdropNativeEl);\r\n      this._backdropCmptRef.destroy();\r\n    }\r\n\r\n    if (this._contentRef && this._contentRef.viewRef) {\r\n      this._contentRef.viewRef.destroy();\r\n    }\r\n\r\n    this._windowCmptRef = null;\r\n    this._backdropCmptRef = null;\r\n    this._contentRef = null;\r\n  }\r\n}\r\n"]}