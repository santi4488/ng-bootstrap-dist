{"version":3,"file":"typeahead-window.js","sourceRoot":"","sources":["../../src/typeahead/typeahead-window.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAS,MAAM,eAAe,CAAC;AAE1F,OAAO,EAAC,QAAQ,EAAC,MAAM,cAAc,CAAC;;;yBAsCxB,CAAC;;;;0BAWS,IAAI;;;;;yBAgBL,QAAQ;;;;2BAUG,IAAI,YAAY,EAAE;iCAEN,IAAI,YAAY,EAAE;;IAE9D,sCAAS,GAAT,cAAc,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;IAEpD,uCAAU,GAAV,UAAW,SAAiB;QAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED,iCAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACpF;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED,iCAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;SAC1C;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACjE;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED,mCAAM,GAAN,UAAO,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;IAE7C,qCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAEO,2CAAc,GAAtB;QACE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;KAC/F;;gBAlGF,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,oBAAoB;oBAC9B,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAC;oBAC5F,QAAQ,EAAE,gtBAcT;iBACF;;;;;uBAQE,KAAK;+BAKL,KAAK;4BAKL,KAAK;yBAKL,KAAK;8BAML,KAAK;mCAKL,KAAK;gCAKL,MAAM,SAAC,QAAQ;sCAEf,MAAM,SAAC,cAAc;;6BA/ExB;;SAuCa,kBAAkB","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef, OnInit} from '@angular/core';\r\n\r\nimport {toString} from '../util/util';\r\n\r\n/**\r\n * Context for the typeahead result template in case you want to override the default one\r\n */\r\nexport interface ResultTemplateContext {\r\n  /**\r\n   * Your typeahead result data model\r\n   */\r\n  result: any;\r\n\r\n  /**\r\n   * Search term from the input used to get current result\r\n   */\r\n  term: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngb-typeahead-window',\r\n  exportAs: 'ngbTypeaheadWindow',\r\n  host: {'class': 'dropdown-menu', 'style': 'display: block', 'role': 'listbox', '[id]': 'id'},\r\n  template: `\r\n    <ng-template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\r\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\r\n    </ng-template>\r\n    <ng-template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\r\n      <button type=\"button\" class=\"dropdown-item\" role=\"option\"\r\n        [id]=\"id + '-' + idx\"\r\n        [class.active]=\"idx === activeIdx\"\r\n        (mouseenter)=\"markActive(idx)\"\r\n        (click)=\"select(result)\">\r\n          <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\r\n          [ngTemplateOutletContext]=\"{result: result, term: term, formatter: formatter}\"></ng-template>\r\n      </button>\r\n    </ng-template>\r\n  `\r\n})\r\nexport class NgbTypeaheadWindow implements OnInit {\r\n  activeIdx = 0;\r\n\r\n  /**\r\n   *  The id for the typeahead widnow. The id should be unique and the same\r\n   *  as the associated typeahead's id.\r\n   */\r\n  @Input() id: string;\r\n\r\n  /**\r\n   * Flag indicating if the first row should be active initially\r\n   */\r\n  @Input() focusFirst = true;\r\n\r\n  /**\r\n   * Typeahead match results to be displayed\r\n   */\r\n  @Input() results;\r\n\r\n  /**\r\n   * Search term used to get current results\r\n   */\r\n  @Input() term: string;\r\n\r\n  /**\r\n   * A function used to format a given result before display. This function should return a formatted string without any\r\n   * HTML markup\r\n   */\r\n  @Input() formatter = toString;\r\n\r\n  /**\r\n   * A template to override a matching result default display\r\n   */\r\n  @Input() resultTemplate: TemplateRef<ResultTemplateContext>;\r\n\r\n  /**\r\n   * Event raised when user selects a particular result row\r\n   */\r\n  @Output('select') selectEvent = new EventEmitter();\r\n\r\n  @Output('activeChange') activeChangeEvent = new EventEmitter();\r\n\r\n  getActive() { return this.results[this.activeIdx]; }\r\n\r\n  markActive(activeIdx: number) {\r\n    this.activeIdx = activeIdx;\r\n    this._activeChanged();\r\n  }\r\n\r\n  next() {\r\n    if (this.activeIdx === this.results.length - 1) {\r\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\r\n    } else {\r\n      this.activeIdx++;\r\n    }\r\n    this._activeChanged();\r\n  }\r\n\r\n  prev() {\r\n    if (this.activeIdx < 0) {\r\n      this.activeIdx = this.results.length - 1;\r\n    } else if (this.activeIdx === 0) {\r\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\r\n    } else {\r\n      this.activeIdx--;\r\n    }\r\n    this._activeChanged();\r\n  }\r\n\r\n  select(item) { this.selectEvent.emit(item); }\r\n\r\n  ngOnInit() {\r\n    this.activeIdx = this.focusFirst ? 0 : -1;\r\n    this._activeChanged();\r\n  }\r\n\r\n  private _activeChanged() {\r\n    this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\r\n  }\r\n}\r\n"]}