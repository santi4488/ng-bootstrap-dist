{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../src/buttons/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, forwardRef, Input, Renderer2, ElementRef, OnDestroy} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nimport {NgbButtonLabel} from './label';\r\n\r\nconst NGB_RADIO_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbRadioGroup),\r\n  multi: true\r\n};\r\n\r\nlet nextId = 0;\r\n\r\n/**\r\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\r\n * specified via ngModel.\r\n */\r\n@Directive({selector: '[ngbRadioGroup]', host: {'role': 'group'}, providers: [NGB_RADIO_VALUE_ACCESSOR]})\r\nexport class NgbRadioGroup implements ControlValueAccessor {\r\n  private _radios: Set<NgbRadio> = new Set<NgbRadio>();\r\n  private _value = null;\r\n  private _disabled: boolean;\r\n\r\n  get disabled() { return this._disabled; }\r\n  set disabled(isDisabled: boolean) { this.setDisabledState(isDisabled); }\r\n\r\n  /**\r\n   * The name of the group. Unless enclosed inputs specify a name, this name is used as the name of the\r\n   * enclosed inputs. If not specified, a name is generated automatically.\r\n   */\r\n  @Input() name = `ngb-radio-${nextId++}`;\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  onRadioChange(radio: NgbRadio) {\r\n    this.writeValue(radio.value);\r\n    this.onChange(radio.value);\r\n  }\r\n\r\n  onRadioValueUpdate() { this._updateRadiosValue(); }\r\n\r\n  register(radio: NgbRadio) { this._radios.add(radio); }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this._updateRadiosDisabled();\r\n  }\r\n\r\n  unregister(radio: NgbRadio) { this._radios.delete(radio); }\r\n\r\n  writeValue(value) {\r\n    this._value = value;\r\n    this._updateRadiosValue();\r\n  }\r\n\r\n  private _updateRadiosValue() { this._radios.forEach((radio) => radio.updateValue(this._value)); }\r\n  private _updateRadiosDisabled() { this._radios.forEach((radio) => radio.updateDisabled()); }\r\n}\r\n\r\n\r\n/**\r\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\r\n */\r\n@Directive({\r\n  selector: '[ngbButton][type=radio]',\r\n  host: {\r\n    '[checked]': 'checked',\r\n    '[disabled]': 'disabled',\r\n    '[name]': 'nameAttr',\r\n    '(change)': 'onChange()',\r\n    '(focus)': 'focused = true',\r\n    '(blur)': 'focused = false'\r\n  }\r\n})\r\nexport class NgbRadio implements OnDestroy {\r\n  private _checked: boolean;\r\n  private _disabled: boolean;\r\n  private _value: any = null;\r\n\r\n  /**\r\n   * The name of the input. All inputs of a group should have the same name. If not specified,\r\n   * the name of the enclosing group is used.\r\n   */\r\n  @Input() name: string;\r\n\r\n  /**\r\n   * You can specify model value of a given radio by binding to the value property.\r\n   */\r\n  @Input('value')\r\n  set value(value: any) {\r\n    this._value = value;\r\n    const stringValue = value ? value.toString() : '';\r\n    this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\r\n    this._group.onRadioValueUpdate();\r\n  }\r\n\r\n  /**\r\n   * A flag indicating if a given radio button is disabled.\r\n   */\r\n  @Input('disabled')\r\n  set disabled(isDisabled: boolean) {\r\n    this._disabled = isDisabled !== false;\r\n    this.updateDisabled();\r\n  }\r\n\r\n  set focused(isFocused: boolean) {\r\n    if (this._label) {\r\n      this._label.focused = isFocused;\r\n    }\r\n    if (!isFocused) {\r\n      this._group.onTouched();\r\n    }\r\n  }\r\n\r\n  get checked() { return this._checked; }\r\n\r\n  get disabled() { return this._group.disabled || this._disabled; }\r\n\r\n  get value() { return this._value; }\r\n\r\n  get nameAttr() { return this.name || this._group.name; }\r\n\r\n  constructor(\r\n      private _group: NgbRadioGroup, private _label: NgbButtonLabel, private _renderer: Renderer2,\r\n      private _element: ElementRef) {\r\n    this._group.register(this);\r\n  }\r\n\r\n  ngOnDestroy() { this._group.unregister(this); }\r\n\r\n  onChange() { this._group.onRadioChange(this); }\r\n\r\n  updateValue(value) {\r\n    this._checked = this.value === value;\r\n    this._label.active = this._checked;\r\n  }\r\n\r\n  updateDisabled() { this._label.disabled = this.disabled; }\r\n}\r\n"]}