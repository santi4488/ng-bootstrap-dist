{"version":3,"file":"tabset.js","sourceRoot":"","sources":["../../src/tabset/tabset.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  Directive,\r\n  TemplateRef,\r\n  ContentChild,\r\n  AfterContentChecked,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport {NgbTabsetConfig} from './tabset-config';\r\n\r\nlet nextId = 0;\r\n\r\n/**\r\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\r\n */\r\n@Directive({selector: 'ng-template[ngbTabTitle]'})\r\nexport class NgbTabTitle {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * This directive must be used to wrap content to be displayed in a tab.\r\n */\r\n@Directive({selector: 'ng-template[ngbTabContent]'})\r\nexport class NgbTabContent {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * A directive representing an individual tab.\r\n */\r\n@Directive({selector: 'ngb-tab'})\r\nexport class NgbTab {\r\n  /**\r\n   * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\r\n   */\r\n  @Input() id: string = `ngb-tab-${nextId++}`;\r\n  /**\r\n   * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\r\n   */\r\n  @Input() title: string;\r\n  /**\r\n   * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  @ContentChild(NgbTabContent) contentTpl: NgbTabContent;\r\n  @ContentChild(NgbTabTitle) titleTpl: NgbTabTitle;\r\n}\r\n\r\n/**\r\n * The payload of the change event fired right before the tab change\r\n */\r\nexport interface NgbTabChangeEvent {\r\n  /**\r\n   * Id of the currently active tab\r\n   */\r\n  activeId: string;\r\n\r\n  /**\r\n   * Id of the newly selected tab\r\n   */\r\n  nextId: string;\r\n\r\n  /**\r\n   * Function that will prevent tab switch if called\r\n   */\r\n  preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * A component that makes it easy to create tabbed interface.\r\n */\r\n@Component({\r\n  selector: 'ngb-tabset',\r\n  exportAs: 'ngbTabset',\r\n  template: `\r\n    <ul [class]=\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\" role=\"tablist\">\r\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\r\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\r\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\r\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\r\n          [attr.aria-expanded]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\r\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></ng-template>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n    <div class=\"tab-content\">\r\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\r\n        <div\r\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\r\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\r\n          role=\"tabpanel\"\r\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\"\r\n          [attr.aria-expanded]=\"tab.id === activeId\">\r\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></ng-template>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `\r\n})\r\nexport class NgbTabset implements AfterContentChecked {\r\n  justifyClass: string;\r\n\r\n  @ContentChildren(NgbTab) tabs: QueryList<NgbTab>;\r\n\r\n  /**\r\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\r\n   */\r\n  @Input() activeId: string;\r\n\r\n  /**\r\n   * Whether the closed tabs should be hidden without destroying them\r\n   */\r\n  @Input() destroyOnHide: boolean = true;\r\n\r\n  /**\r\n   * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\r\n   * 'justified'\r\n   * The default value is 'start'.\r\n   */\r\n  @Input()\r\n  set justify(className: 'start' | 'center' | 'end' | 'fill' | 'justified') {\r\n    if (className === 'fill' || className === 'justified') {\r\n      this.justifyClass = `nav-${className}`;\r\n    } else {\r\n      this.justifyClass = `justify-content-${className}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The orientation of the nav (horizontal or vertical).\r\n   * The default value is 'horizontal'.\r\n   */\r\n  @Input() orientation: 'horizontal' | 'vertical';\r\n\r\n  /**\r\n   * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.\r\n   */\r\n  @Input() type: 'tabs' | 'pills';\r\n\r\n  /**\r\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\r\n   */\r\n  @Output() tabChange = new EventEmitter<NgbTabChangeEvent>();\r\n\r\n  constructor(config: NgbTabsetConfig) {\r\n    this.type = config.type;\r\n    this.justify = config.justify;\r\n    this.orientation = config.orientation;\r\n  }\r\n\r\n  /**\r\n   * Selects the tab with the given id and shows its associated pane.\r\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n   */\r\n  select(tabId: string) {\r\n    let selectedTab = this._getTabById(tabId);\r\n    if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\r\n      let defaultPrevented = false;\r\n\r\n      this.tabChange.emit(\r\n          {activeId: this.activeId, nextId: selectedTab.id, preventDefault: () => { defaultPrevented = true; }});\r\n\r\n      if (!defaultPrevented) {\r\n        this.activeId = selectedTab.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // auto-correct activeId that might have been set incorrectly as input\r\n    let activeTab = this._getTabById(this.activeId);\r\n    this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\r\n  }\r\n\r\n  private _getTabById(id: string): NgbTab {\r\n    let tabsWithId: NgbTab[] = this.tabs.filter(tab => tab.id === id);\r\n    return tabsWithId.length ? tabsWithId[0] : null;\r\n  }\r\n}\r\n"]}