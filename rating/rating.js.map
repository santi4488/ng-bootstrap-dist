{"version":3,"file":"rating.js","sourceRoot":"","sources":["../../src/rating/rating.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  TemplateRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ContentChild,\r\n  forwardRef,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport {NgbRatingConfig} from './rating-config';\r\nimport {toString, getValueInRange} from '../util/util';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nenum Key {\r\n  End = 35,\r\n  Home = 36,\r\n  ArrowLeft = 37,\r\n  ArrowUp = 38,\r\n  ArrowRight = 39,\r\n  ArrowDown = 40\r\n}\r\n\r\n/**\r\n * Context for the custom star display template\r\n */\r\nexport interface StarTemplateContext {\r\n  /**\r\n   * Star fill percentage. An integer value between 0 and 100\r\n   */\r\n  fill: number;\r\n\r\n  /**\r\n   * Index of the star.\r\n   */\r\n  index: number;\r\n}\r\n\r\nconst NGB_RATING_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbRating),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Rating directive that will take care of visualising a star rating bar.\r\n */\r\n@Component({\r\n  selector: 'ngb-rating',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'd-inline-flex',\r\n    'tabindex': '0',\r\n    'role': 'slider',\r\n    'aria-valuemin': '0',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuenow]': 'nextRate',\r\n    '[attr.aria-valuetext]': 'ariaValueText()',\r\n    '[attr.aria-disabled]': 'readonly ? true : null',\r\n    '(blur)': 'handleBlur()',\r\n    '(keydown)': 'handleKeyDown($event)',\r\n    '(mouseleave)': 'reset()'\r\n  },\r\n  template: `\r\n    <ng-template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\r\n    <ng-template ngFor [ngForOf]=\"contexts\" let-index=\"index\">\r\n      <span class=\"sr-only\">({{ index < nextRate ? '*' : ' ' }})</span>\r\n      <span (mouseenter)=\"enter(index + 1)\" (click)=\"handleClick(index + 1)\" [style.cursor]=\"readonly || disabled ? 'default' : 'pointer'\">\r\n        <ng-template [ngTemplateOutlet]=\"starTemplate || t\" [ngTemplateOutletContext]=\"contexts[index]\"></ng-template>\r\n      </span>\r\n    </ng-template>\r\n  `,\r\n  providers: [NGB_RATING_VALUE_ACCESSOR]\r\n})\r\nexport class NgbRating implements ControlValueAccessor,\r\n    OnInit, OnChanges {\r\n  contexts: StarTemplateContext[] = [];\r\n  disabled = false;\r\n  nextRate: number;\r\n\r\n\r\n  /**\r\n   * Maximal rating that can be given using this widget.\r\n   */\r\n  @Input() max: number;\r\n\r\n  /**\r\n   * Current rating. Can be a decimal value like 3.75\r\n   */\r\n  @Input() rate: number;\r\n\r\n  /**\r\n   * A flag indicating if rating can be updated.\r\n   */\r\n  @Input() readonly: boolean;\r\n\r\n  /**\r\n   * A flag indicating if rating can be reset to 0 on mouse click\r\n   */\r\n  @Input() resettable: boolean;\r\n\r\n  /**\r\n   * A template to override star display.\r\n   * Alternatively put a <ng-template> as the only child of <ngb-rating> element\r\n   */\r\n  @Input() @ContentChild(TemplateRef) starTemplate: TemplateRef<StarTemplateContext>;\r\n\r\n  /**\r\n   * An event fired when a user is hovering over a given rating.\r\n   * Event's payload equals to the rating being hovered over.\r\n   */\r\n  @Output() hover = new EventEmitter<number>();\r\n\r\n  /**\r\n   * An event fired when a user stops hovering over a given rating.\r\n   * Event's payload equals to the rating of the last item being hovered over.\r\n   */\r\n  @Output() leave = new EventEmitter<number>();\r\n\r\n  /**\r\n   * An event fired when a user selects a new rating.\r\n   * Event's payload equals to the newly selected rating.\r\n   */\r\n  @Output() rateChange = new EventEmitter<number>(true);\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  constructor(config: NgbRatingConfig, private _changeDetectorRef: ChangeDetectorRef) {\r\n    this.max = config.max;\r\n    this.readonly = config.readonly;\r\n  }\r\n\r\n  ariaValueText() { return `${this.nextRate} out of ${this.max}`; }\r\n\r\n  enter(value: number): void {\r\n    if (!this.readonly && !this.disabled) {\r\n      this._updateState(value);\r\n    }\r\n    this.hover.emit(value);\r\n  }\r\n\r\n  handleBlur() { this.onTouched(); }\r\n\r\n  handleClick(value: number) { this.update(this.resettable && this.rate === value ? 0 : value); }\r\n\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (Key[toString(event.which)]) {\r\n      event.preventDefault();\r\n\r\n      switch (event.which) {\r\n        case Key.ArrowDown:\r\n        case Key.ArrowLeft:\r\n          this.update(this.rate - 1);\r\n          break;\r\n        case Key.ArrowUp:\r\n        case Key.ArrowRight:\r\n          this.update(this.rate + 1);\r\n          break;\r\n        case Key.Home:\r\n          this.update(0);\r\n          break;\r\n        case Key.End:\r\n          this.update(this.max);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['rate']) {\r\n      this.update(this.rate);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.contexts = Array.from({length: this.max}, (v, k) => ({fill: 0, index: k}));\r\n    this._updateState(this.rate);\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  reset(): void {\r\n    this.leave.emit(this.nextRate);\r\n    this._updateState(this.rate);\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean) { this.disabled = isDisabled; }\r\n\r\n  update(value: number, internalChange = true): void {\r\n    const newRate = getValueInRange(value, this.max, 0);\r\n    if (!this.readonly && !this.disabled && this.rate !== newRate) {\r\n      this.rate = newRate;\r\n      this.rateChange.emit(this.rate);\r\n    }\r\n    if (internalChange) {\r\n      this.onChange(this.rate);\r\n      this.onTouched();\r\n    }\r\n    this._updateState(this.rate);\r\n  }\r\n\r\n  writeValue(value) {\r\n    this.update(value, false);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private _getFillValue(index: number): number {\r\n    const diff = this.nextRate - index;\r\n\r\n    if (diff >= 1) {\r\n      return 100;\r\n    }\r\n    if (diff < 1 && diff > 0) {\r\n      return Number.parseInt((diff * 100).toFixed(2));\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  private _updateState(nextValue: number) {\r\n    this.nextRate = nextValue;\r\n    this.contexts.forEach((context, index) => context.fill = this._getFillValue(index));\r\n  }\r\n}\r\n"]}