{"version":3,"file":"carousel.js","sourceRoot":"","sources":["../../src/carousel/carousel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Directive,\r\n  TemplateRef,\r\n  ContentChildren,\r\n  QueryList,\r\n  Input,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport {NgbCarouselConfig} from './carousel-config';\r\n\r\nlet nextId = 0;\r\n\r\n/**\r\n * Represents an individual slide to be used within a carousel.\r\n */\r\n@Directive({selector: 'ng-template[ngbSlide]'})\r\nexport class NgbSlide {\r\n  /**\r\n   * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\r\n   * Will be auto-generated if not provided.\r\n   */\r\n  @Input() id = `ngb-slide-${nextId++}`;\r\n  constructor(public tplRef: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * Directive to easily create carousels based on Bootstrap's markup.\r\n */\r\n@Component({\r\n  selector: 'ngb-carousel',\r\n  exportAs: 'ngbCarousel',\r\n  host: {\r\n    'class': 'carousel slide',\r\n    '[style.display]': '\"block\"',\r\n    'tabIndex': '0',\r\n    '(mouseenter)': 'pause()',\r\n    '(mouseleave)': 'cycle()',\r\n    '(keydown.arrowLeft)': 'keyPrev()',\r\n    '(keydown.arrowRight)': 'keyNext()'\r\n  },\r\n  template: `\r\n    <ol class=\"carousel-indicators\">\r\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\"\r\n          (click)=\"cycleToSelected(slide.id, getSlideEventDirection(activeId, slide.id))\"></li>\r\n    </ol>\r\n    <div class=\"carousel-inner\">\r\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\r\n        <ng-template [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\r\n      </div>\r\n    </div>\r\n    <a class=\"carousel-control-prev\" role=\"button\" (click)=\"cycleToPrev()\">\r\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\">Previous</span>\r\n    </a>\r\n    <a class=\"carousel-control-next\" role=\"button\" (click)=\"cycleToNext()\">\r\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\">Next</span>\r\n    </a>\r\n    `\r\n})\r\nexport class NgbCarousel implements AfterContentChecked,\r\n    OnDestroy, OnInit, OnChanges {\r\n  @ContentChildren(NgbSlide) slides: QueryList<NgbSlide>;\r\n  private _slideChangeInterval;\r\n\r\n  /**\r\n   * Amount of time in milliseconds before next slide is shown.\r\n   */\r\n  @Input() interval: number;\r\n\r\n  /**\r\n   * Whether can wrap from the last to the first slide.\r\n   */\r\n  @Input() wrap: boolean;\r\n\r\n  /**\r\n   * A flag for allowing navigation via keyboard\r\n   */\r\n  @Input() keyboard: boolean;\r\n\r\n  /**\r\n   * The active slide id.\r\n   */\r\n  @Input() activeId: string;\r\n\r\n  /**\r\n   * A carousel slide event fired when the slide transition is completed.\r\n   * See NgbSlideEvent for payload details\r\n   */\r\n  @Output() slide = new EventEmitter<NgbSlideEvent>();\r\n\r\n  constructor(config: NgbCarouselConfig) {\r\n    this.interval = config.interval;\r\n    this.wrap = config.wrap;\r\n    this.keyboard = config.keyboard;\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    let activeSlide = this._getSlideById(this.activeId);\r\n    this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\r\n  }\r\n\r\n  ngOnInit() { this._startTimer(); }\r\n\r\n  ngOnChanges(changes) {\r\n    if ('interval' in changes && !changes['interval'].isFirstChange()) {\r\n      this._restartTimer();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() { clearInterval(this._slideChangeInterval); }\r\n\r\n  /**\r\n   * Navigate to a slide with the specified identifier.\r\n   */\r\n  select(slideId: string) {\r\n    this.cycleToSelected(slideId, this.getSlideEventDirection(this.activeId, slideId));\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Navigate to the next slide.\r\n   */\r\n  prev() {\r\n    this.cycleToPrev();\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Navigate to the next slide.\r\n   */\r\n  next() {\r\n    this.cycleToNext();\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Stops the carousel from cycling through items.\r\n   */\r\n  pause() { this._stopTimer(); }\r\n\r\n  /**\r\n   * Restarts cycling through the carousel slides from left to right.\r\n   */\r\n  cycle() { this._startTimer(); }\r\n\r\n  cycleToNext() { this.cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT); }\r\n\r\n  cycleToPrev() { this.cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT); }\r\n\r\n  cycleToSelected(slideIdx: string, direction: NgbSlideEventDirection) {\r\n    let selectedSlide = this._getSlideById(slideIdx);\r\n    if (selectedSlide) {\r\n      if (selectedSlide.id !== this.activeId) {\r\n        this.slide.emit({prev: this.activeId, current: selectedSlide.id, direction: direction});\r\n      }\r\n      this.activeId = selectedSlide.id;\r\n    }\r\n  }\r\n\r\n  getSlideEventDirection(currentActiveSlideId: string, nextActiveSlideId: string): NgbSlideEventDirection {\r\n    const currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\r\n    const nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\r\n\r\n    return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\r\n  }\r\n\r\n  keyPrev() {\r\n    if (this.keyboard) {\r\n      this.prev();\r\n    }\r\n  }\r\n\r\n  keyNext() {\r\n    if (this.keyboard) {\r\n      this.next();\r\n    }\r\n  }\r\n\r\n  private _restartTimer() {\r\n    this._stopTimer();\r\n    this._startTimer();\r\n  }\r\n\r\n  private _startTimer() {\r\n    if (this.interval > 0) {\r\n      this._slideChangeInterval = setInterval(() => { this.cycleToNext(); }, this.interval);\r\n    }\r\n  }\r\n\r\n  private _stopTimer() { clearInterval(this._slideChangeInterval); }\r\n\r\n  private _getSlideById(slideId: string): NgbSlide {\r\n    let slideWithId: NgbSlide[] = this.slides.filter(slide => slide.id === slideId);\r\n    return slideWithId.length ? slideWithId[0] : null;\r\n  }\r\n\r\n  private _getSlideIdxById(slideId: string): number {\r\n    return this.slides.toArray().indexOf(this._getSlideById(slideId));\r\n  }\r\n\r\n  private _getNextSlide(currentSlideId: string): string {\r\n    const slideArr = this.slides.toArray();\r\n    const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n    const isLastSlide = currentSlideIdx === slideArr.length - 1;\r\n\r\n    return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\r\n                         slideArr[currentSlideIdx + 1].id;\r\n  }\r\n\r\n  private _getPrevSlide(currentSlideId: string): string {\r\n    const slideArr = this.slides.toArray();\r\n    const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n    const isFirstSlide = currentSlideIdx === 0;\r\n\r\n    return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\r\n                          slideArr[currentSlideIdx - 1].id;\r\n  }\r\n}\r\n\r\n/**\r\n* The payload of the slide event fired when the slide transition is completed\r\n*/\r\nexport interface NgbSlideEvent {\r\n  /**\r\n   * Previous slide id\r\n   */\r\n  prev: string;\r\n\r\n  /**\r\n   * New slide ids\r\n   */\r\n  current: string;\r\n\r\n  /**\r\n   * Slide event direction\r\n   */\r\n  direction: NgbSlideEventDirection;\r\n}\r\n\r\n/**\r\n * Enum to define the carousel slide event direction\r\n */\r\nexport enum NgbSlideEventDirection {\r\n  LEFT = <any>'left',\r\n  RIGHT = <any>'right'\r\n}\r\n\r\nexport const NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\r\n"]}