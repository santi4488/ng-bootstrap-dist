{"version":3,"file":"pagination.js","sourceRoot":"","sources":["../../src/pagination/pagination.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\r\nimport {getValueInRange, isNumber} from '../util/util';\r\nimport {NgbPaginationConfig} from './pagination-config';\r\n\r\n/**\r\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\r\n */\r\n@Component({\r\n  selector: 'ngb-pagination',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'role': 'navigation'},\r\n  template: `\r\n    <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\r\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\"\r\n        [class.disabled]=\"!hasPrevious() || disabled\">\r\n        <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"(hasPrevious() ? null : '-1')\">\r\n          <span aria-hidden=\"true\">&laquo;&laquo;</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li *ngIf=\"directionLinks\" class=\"page-item\"\r\n        [class.disabled]=\"!hasPrevious() || disabled\">\r\n        <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"(hasPrevious() ? null : '-1')\">\r\n          <span aria-hidden=\"true\">&laquo;</span>\r\n        </a>\r\n      </li>\r\n      <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\"\r\n        [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\r\n        <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\r\n        <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">\r\n          {{pageNumber}}\r\n          <span *ngIf=\"pageNumber === page\" class=\"sr-only\">(current)</span>\r\n        </a>\r\n      </li>\r\n      <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\r\n        <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"(hasNext() ? null : '-1')\">\r\n          <span aria-hidden=\"true\">&raquo;</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\r\n        <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"(hasNext() ? null : '-1')\">\r\n          <span aria-hidden=\"true\">&raquo;&raquo;</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `\r\n})\r\nexport class NgbPagination implements OnChanges {\r\n  pageCount = 0;\r\n  pages: number[] = [];\r\n\r\n  /**\r\n   * Whether to disable buttons from user input\r\n   */\r\n  @Input() disabled: boolean;\r\n\r\n  /**\r\n   *  Whether to show the \"First\" and \"Last\" page links\r\n   */\r\n  @Input() boundaryLinks: boolean;\r\n\r\n  /**\r\n   *  Whether to show the \"Next\" and \"Previous\" page links\r\n   */\r\n  @Input() directionLinks: boolean;\r\n\r\n  /**\r\n   *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\r\n   */\r\n  @Input() ellipses: boolean;\r\n\r\n  /**\r\n   *  Whether to rotate pages when maxSize > number of pages.\r\n   *  Current page will be in the middle\r\n   */\r\n  @Input() rotate: boolean;\r\n\r\n  /**\r\n   *  Number of items in collection.\r\n   */\r\n  @Input() collectionSize: number;\r\n\r\n  /**\r\n   *  Maximum number of pages to display.\r\n   */\r\n  @Input() maxSize: number;\r\n\r\n  /**\r\n   *  Current page.\r\n   */\r\n  @Input() page = 0;\r\n\r\n  /**\r\n   *  Number of items per page.\r\n   */\r\n  @Input() pageSize: number;\r\n\r\n  /**\r\n   *  An event fired when the page is changed.\r\n   *  Event's payload equals to the newly selected page.\r\n   */\r\n  @Output() pageChange = new EventEmitter<number>(true);\r\n\r\n  /**\r\n   * Pagination display size: small or large\r\n   */\r\n  @Input() size: 'sm' | 'lg';\r\n\r\n  constructor(config: NgbPaginationConfig) {\r\n    this.disabled = config.disabled;\r\n    this.boundaryLinks = config.boundaryLinks;\r\n    this.directionLinks = config.directionLinks;\r\n    this.ellipses = config.ellipses;\r\n    this.maxSize = config.maxSize;\r\n    this.pageSize = config.pageSize;\r\n    this.rotate = config.rotate;\r\n    this.size = config.size;\r\n  }\r\n\r\n  hasPrevious(): boolean { return this.page > 1; }\r\n\r\n  hasNext(): boolean { return this.page < this.pageCount; }\r\n\r\n  selectPage(pageNumber: number): void { this._updatePages(pageNumber); }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void { this._updatePages(this.page); }\r\n\r\n  isEllipsis(pageNumber): boolean { return pageNumber === -1; }\r\n\r\n  /**\r\n   * Appends ellipses and first/last page number to the displayed pages\r\n   */\r\n  private _applyEllipses(start: number, end: number) {\r\n    if (this.ellipses) {\r\n      if (start > 0) {\r\n        if (start > 1) {\r\n          this.pages.unshift(-1);\r\n        }\r\n        this.pages.unshift(1);\r\n      }\r\n      if (end < this.pageCount) {\r\n        if (end < (this.pageCount - 1)) {\r\n          this.pages.push(-1);\r\n        }\r\n        this.pages.push(this.pageCount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotates page numbers based on maxSize items visible.\r\n   * Currently selected page stays in the middle:\r\n   *\r\n   * Ex. for selected page = 6:\r\n   * [5,*6*,7] for maxSize = 3\r\n   * [4,5,*6*,7] for maxSize = 4\r\n   */\r\n  private _applyRotation(): [number, number] {\r\n    let start = 0;\r\n    let end = this.pageCount;\r\n    let leftOffset = Math.floor(this.maxSize / 2);\r\n    let rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\r\n\r\n    if (this.page <= leftOffset) {\r\n      // very beginning, no rotation -> [0..maxSize]\r\n      end = this.maxSize;\r\n    } else if (this.pageCount - this.page < leftOffset) {\r\n      // very end, no rotation -> [len-maxSize..len]\r\n      start = this.pageCount - this.maxSize;\r\n    } else {\r\n      // rotate\r\n      start = this.page - leftOffset - 1;\r\n      end = this.page + rightOffset;\r\n    }\r\n\r\n    return [start, end];\r\n  }\r\n\r\n  /**\r\n   * Paginates page numbers based on maxSize items per page\r\n   */\r\n  private _applyPagination(): [number, number] {\r\n    let page = Math.ceil(this.page / this.maxSize) - 1;\r\n    let start = page * this.maxSize;\r\n    let end = start + this.maxSize;\r\n\r\n    return [start, end];\r\n  }\r\n\r\n  private _setPageInRange(newPageNo) {\r\n    const prevPageNo = this.page;\r\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\r\n\r\n    if (this.page !== prevPageNo) {\r\n      this.pageChange.emit(this.page);\r\n    }\r\n  }\r\n\r\n  private _updatePages(newPage: number) {\r\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\r\n\r\n    if (!isNumber(this.pageCount)) {\r\n      this.pageCount = 0;\r\n    }\r\n\r\n    // fill-in model needed to render pages\r\n    this.pages.length = 0;\r\n    for (let i = 1; i <= this.pageCount; i++) {\r\n      this.pages.push(i);\r\n    }\r\n\r\n    // set page within 1..max range\r\n    this._setPageInRange(newPage);\r\n\r\n    // apply maxSize if necessary\r\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\r\n      let start = 0;\r\n      let end = this.pageCount;\r\n\r\n      // either paginating or rotating page numbers\r\n      if (this.rotate) {\r\n        [start, end] = this._applyRotation();\r\n      } else {\r\n        [start, end] = this._applyPagination();\r\n      }\r\n\r\n      this.pages = this.pages.slice(start, end);\r\n\r\n      // adding ellipses\r\n      this._applyEllipses(start, end);\r\n    }\r\n  }\r\n}\r\n"]}