{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util/util.ts"],"names":[],"mappings":"AAAA,MAAM,oBAAoB,KAAU;IAClC,MAAM,CAAC,QAAQ,CAAC,KAAG,KAAO,EAAE,EAAE,CAAC,CAAC;CACjC;AAED,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC,GAAG,KAAG,KAAO,GAAG,EAAE,CAAC;CAClE;AAED,MAAM,0BAA0B,KAAa,EAAE,GAAW,EAAE,GAAO;IAAP,oBAAA,EAAA,OAAO;IACjE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;CAC5C;AAED,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;CAClC;AAED,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;CACjC;AAED,MAAM,oBAAoB,KAAU;IAClC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;CACpF;AAED,MAAM,oBAAoB,KAAU;IAClC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;CAC9C;AAED,MAAM,oBAAoB,KAAa;IACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,CAAA,MAAI,KAAO,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9B;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,CAAC;KACX;CACF;AAED,MAAM,uBAAuB,IAAI;IAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;CACzD","sourcesContent":["export function toInteger(value: any): number {\r\n  return parseInt(`${value}`, 10);\r\n}\r\n\r\nexport function toString(value: any): string {\r\n  return (value !== undefined && value !== null) ? `${value}` : '';\r\n}\r\n\r\nexport function getValueInRange(value: number, max: number, min = 0): number {\r\n  return Math.max(Math.min(value, max), min);\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isNumber(value: any): value is number {\r\n  return !isNaN(toInteger(value));\r\n}\r\n\r\nexport function isInteger(value: any): value is number {\r\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n}\r\n\r\nexport function isDefined(value: any): boolean {\r\n  return value !== undefined && value !== null;\r\n}\r\n\r\nexport function padNumber(value: number) {\r\n  if (isNumber(value)) {\r\n    return `0${value}`.slice(-2);\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function regExpEscape(text) {\r\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n"]}