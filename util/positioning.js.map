{"version":3,"file":"positioning.js","sourceRoot":"","sources":["../../src/util/positioning.ts"],"names":[],"mappings":"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","sourcesContent":["// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nexport class Positioning {\r\n  private getAllStyles(element: HTMLElement) { return window.getComputedStyle(element); }\r\n\r\n  private getStyle(element: HTMLElement, prop: string): string { return this.getAllStyles(element)[prop]; }\r\n\r\n  private isStaticPositioned(element: HTMLElement): boolean {\r\n    return (this.getStyle(element, 'position') || 'static') === 'static';\r\n  }\r\n\r\n  private offsetParent(element: HTMLElement): HTMLElement {\r\n    let offsetParentEl = <HTMLElement>element.offsetParent || document.documentElement;\r\n\r\n    while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n      offsetParentEl = <HTMLElement>offsetParentEl.offsetParent;\r\n    }\r\n\r\n    return offsetParentEl || document.documentElement;\r\n  }\r\n\r\n  position(element: HTMLElement, round = true): ClientRect {\r\n    let elPosition: ClientRect;\r\n    let parentOffset: ClientRect = {width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0};\r\n\r\n    if (this.getStyle(element, 'position') === 'fixed') {\r\n      elPosition = element.getBoundingClientRect();\r\n    } else {\r\n      const offsetParentEl = this.offsetParent(element);\r\n\r\n      elPosition = this.offset(element, false);\r\n\r\n      if (offsetParentEl !== document.documentElement) {\r\n        parentOffset = this.offset(offsetParentEl, false);\r\n      }\r\n\r\n      parentOffset.top += offsetParentEl.clientTop;\r\n      parentOffset.left += offsetParentEl.clientLeft;\r\n    }\r\n\r\n    elPosition.top -= parentOffset.top;\r\n    elPosition.bottom -= parentOffset.top;\r\n    elPosition.left -= parentOffset.left;\r\n    elPosition.right -= parentOffset.left;\r\n\r\n    if (round) {\r\n      elPosition.top = Math.round(elPosition.top);\r\n      elPosition.bottom = Math.round(elPosition.bottom);\r\n      elPosition.left = Math.round(elPosition.left);\r\n      elPosition.right = Math.round(elPosition.right);\r\n    }\r\n\r\n    return elPosition;\r\n  }\r\n\r\n  offset(element: HTMLElement, round = true): ClientRect {\r\n    const elBcr = element.getBoundingClientRect();\r\n    const viewportOffset = {\r\n      top: window.pageYOffset - document.documentElement.clientTop,\r\n      left: window.pageXOffset - document.documentElement.clientLeft\r\n    };\r\n\r\n    let elOffset = {\r\n      height: elBcr.height || element.offsetHeight,\r\n      width: elBcr.width || element.offsetWidth,\r\n      top: elBcr.top + viewportOffset.top,\r\n      bottom: elBcr.bottom + viewportOffset.top,\r\n      left: elBcr.left + viewportOffset.left,\r\n      right: elBcr.right + viewportOffset.left\r\n    };\r\n\r\n    if (round) {\r\n      elOffset.height = Math.round(elOffset.height);\r\n      elOffset.width = Math.round(elOffset.width);\r\n      elOffset.top = Math.round(elOffset.top);\r\n      elOffset.bottom = Math.round(elOffset.bottom);\r\n      elOffset.left = Math.round(elOffset.left);\r\n      elOffset.right = Math.round(elOffset.right);\r\n    }\r\n\r\n    return elOffset;\r\n  }\r\n\r\n  positionElements(hostElement: HTMLElement, targetElement: HTMLElement, placement: string, appendToBody?: boolean):\r\n      ClientRect {\r\n    const hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n    const targetElStyles = this.getAllStyles(targetElement);\r\n    const targetElBCR = targetElement.getBoundingClientRect();\r\n    const placementPrimary = placement.split('-')[0] || 'top';\r\n    const placementSecondary = placement.split('-')[1] || 'center';\r\n\r\n    let targetElPosition: ClientRect = {\r\n      'height': targetElBCR.height || targetElement.offsetHeight,\r\n      'width': targetElBCR.width || targetElement.offsetWidth,\r\n      'top': 0,\r\n      'bottom': targetElBCR.height || targetElement.offsetHeight,\r\n      'left': 0,\r\n      'right': targetElBCR.width || targetElement.offsetWidth\r\n    };\r\n\r\n    switch (placementPrimary) {\r\n      case 'top':\r\n        targetElPosition.top =\r\n            hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\r\n        break;\r\n      case 'bottom':\r\n        targetElPosition.top = hostElPosition.top + hostElPosition.height;\r\n        break;\r\n      case 'left':\r\n        targetElPosition.left =\r\n            hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\r\n        break;\r\n      case 'right':\r\n        targetElPosition.left = hostElPosition.left + hostElPosition.width;\r\n        break;\r\n    }\r\n\r\n    switch (placementSecondary) {\r\n      case 'top':\r\n        targetElPosition.top = hostElPosition.top;\r\n        break;\r\n      case 'bottom':\r\n        targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n        break;\r\n      case 'left':\r\n        targetElPosition.left = hostElPosition.left;\r\n        break;\r\n      case 'right':\r\n        targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n        break;\r\n      case 'center':\r\n        if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n          targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\r\n        } else {\r\n          targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\r\n        }\r\n        break;\r\n    }\r\n\r\n    targetElPosition.top = Math.round(targetElPosition.top);\r\n    targetElPosition.bottom = Math.round(targetElPosition.bottom);\r\n    targetElPosition.left = Math.round(targetElPosition.left);\r\n    targetElPosition.right = Math.round(targetElPosition.right);\r\n\r\n    return targetElPosition;\r\n  }\r\n\r\n  // get the availble placements of the target element in the viewport dependeing on the host element\r\n  getAvailablePlacements(hostElement: HTMLElement, targetElement: HTMLElement): string[] {\r\n    let availablePlacements: Array<string> = [];\r\n    let hostElemClientRect = hostElement.getBoundingClientRect();\r\n    let targetElemClientRect = targetElement.getBoundingClientRect();\r\n    let html = document.documentElement;\r\n\r\n    // left: check if target width can be placed between host left and viewport start and also height of target is\r\n    // inside viewport\r\n    if (targetElemClientRect.width < hostElemClientRect.left) {\r\n      // check for left only\r\n      if ((hostElemClientRect.top + hostElemClientRect.height / 2 - targetElement.offsetHeight / 2) > 0) {\r\n        availablePlacements.splice(availablePlacements.length, 1, 'left');\r\n      }\r\n      // check for left-top and left-bottom\r\n      this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);\r\n    }\r\n\r\n    // top: target height is less than host top\r\n    if (targetElemClientRect.height < hostElemClientRect.top) {\r\n      availablePlacements.splice(availablePlacements.length, 1, 'top');\r\n      this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);\r\n    }\r\n\r\n    // right: check if target width can be placed between host right and viewport end and also height of target is\r\n    // inside viewport\r\n    if ((window.innerWidth || html.clientWidth) - hostElemClientRect.right > targetElemClientRect.width) {\r\n      // check for right only\r\n      if ((hostElemClientRect.top + hostElemClientRect.height / 2 - targetElement.offsetHeight / 2) > 0) {\r\n        availablePlacements.splice(availablePlacements.length, 1, 'right');\r\n      }\r\n      // check for right-top and right-bottom\r\n      this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);\r\n    }\r\n\r\n    // bottom: check if there is enough space between host bottom and viewport end for target height\r\n    if ((window.innerHeight || html.clientHeight) - hostElemClientRect.bottom > targetElemClientRect.height) {\r\n      availablePlacements.splice(availablePlacements.length, 1, 'bottom');\r\n      this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);\r\n    }\r\n\r\n    return availablePlacements;\r\n  }\r\n\r\n  /**\r\n   * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\r\n   * primaryplacement: left|right\r\n   * availablePlacementArr: array in which available placemets to be set\r\n   */\r\n  private setSecondaryPlacementForLeftRight(\r\n      hostElemClientRect: ClientRect, targetElemClientRect: ClientRect, primaryPlacement: string,\r\n      availablePlacementArr: Array<string>) {\r\n    let html = document.documentElement;\r\n    // check for left-bottom\r\n    if (targetElemClientRect.height <= hostElemClientRect.bottom) {\r\n      availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');\r\n    }\r\n    if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {\r\n      availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\r\n   * primaryplacement: top|bottom\r\n   * availablePlacementArr: array in which available placemets to be set\r\n   */\r\n  private setSecondaryPlacementForTopBottom(\r\n      hostElemClientRect: ClientRect, targetElemClientRect: ClientRect, primaryPlacement: string,\r\n      availablePlacementArr: Array<string>) {\r\n    let html = document.documentElement;\r\n    // check for left-bottom\r\n    if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {\r\n      availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');\r\n    }\r\n    if (targetElemClientRect.width <= hostElemClientRect.right) {\r\n      availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');\r\n    }\r\n  }\r\n}\r\n\r\nconst positionService = new Positioning();\r\n\r\n/*\r\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\r\n * Returns the applied placement.\r\n * In case of auto placement, placements are selected in order 'top', 'bottom', 'left', 'right'.\r\n * */\r\nexport function positionElements(\r\n    hostElement: HTMLElement, targetElement: HTMLElement, placement: string | Placement | PlacementArray,\r\n    appendToBody?: boolean): Placement {\r\n  let placementVals: Array<Placement> = Array.isArray(placement) ? placement : [placement as Placement];\r\n\r\n  // replace auto placement with other placements\r\n  let hasAuto = placementVals.findIndex(val => val === 'auto');\r\n  if (hasAuto >= 0) {\r\n    ['top', 'right', 'bottom', 'left'].forEach(function(obj) {\r\n      if (placementVals.find(val => val.search('^' + obj + '|^' + obj + '-') !== -1) == null) {\r\n        placementVals.splice(hasAuto++, 1, obj as Placement);\r\n      }\r\n    });\r\n  }\r\n\r\n  // coordinates where to position\r\n  let topVal = 0, leftVal = 0;\r\n  let appliedPlacement: Placement;\r\n  // get available placements\r\n  let availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);\r\n  // iterate over all the passed placements\r\n  for (let { item, index } of toItemIndexes(placementVals)) {\r\n    // check if passed placement is present in the available placement or otherwise apply the last placement in the\r\n    // passed placement list\r\n    if ((availablePlacements.find(val => val === item) != null) || (placementVals.length === index + 1)) {\r\n      appliedPlacement = <Placement>item;\r\n      const pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);\r\n      topVal = pos.top;\r\n      leftVal = pos.left;\r\n      break;\r\n    }\r\n  }\r\n  targetElement.style.top = `${topVal}px`;\r\n  targetElement.style.left = `${leftVal}px`;\r\n  return appliedPlacement;\r\n}\r\n\r\n// function to get index and item of an array\r\nfunction toItemIndexes<T>(a: T[]) {\r\n  return a.map((item, index) => ({item, index}));\r\n}\r\n\r\nexport type Placement = 'auto' | 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' |\r\n    'bottom-right' | 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom';\r\n\r\nexport type PlacementArray = Placement | Array<Placement>;\r\n"]}