{"version":3,"file":"timepicker.js","sourceRoot":"","sources":["../../src/timepicker/timepicker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, forwardRef, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nimport {isNumber, padNumber, toInteger, isDefined} from '../util/util';\r\nimport {NgbTime} from './ngb-time';\r\nimport {NgbTimepickerConfig} from './timepicker-config';\r\n\r\nconst NGB_TIMEPICKER_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbTimepicker),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A lightweight & configurable timepicker directive.\r\n */\r\n@Component({\r\n  selector: 'ngb-timepicker',\r\n  styles: [`\r\n    .ngb-tp {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    .ngb-tp-hour, .ngb-tp-minute, .ngb-tp-second, .ngb-tp-meridian {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-around;\r\n    }\r\n\r\n    .ngb-tp-spacer {\r\n      width: 1em;\r\n      text-align: center;\r\n    }\r\n\r\n    .chevron::before {\r\n      border-style: solid;\r\n      border-width: 0.29em 0.29em 0 0;\r\n      content: '';\r\n      display: inline-block;\r\n      height: 0.69em;\r\n      left: 0.05em;\r\n      position: relative;\r\n      top: 0.15em;\r\n      transform: rotate(-45deg);\r\n      -webkit-transform: rotate(-45deg);\r\n      -ms-transform: rotate(-45deg);\r\n      vertical-align: middle;\r\n      width: 0.71em;\r\n    }\r\n\r\n    .chevron.bottom:before {\r\n      top: -.3em;\r\n      -webkit-transform: rotate(135deg);\r\n      -ms-transform: rotate(135deg);\r\n      transform: rotate(135deg);\r\n    }\r\n\r\n    input {\r\n      text-align: center;\r\n      display: inline-block;\r\n      width: auto;\r\n    }\r\n  `],\r\n  template: `\r\n    <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n      <div class=\"ngb-tp\">\r\n        <div class=\"ngb-tp-hour\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeHour(hourStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron\"></span>\r\n            <span class=\"sr-only\">Increment hours</span>\r\n          </button>\r\n          <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\r\n            [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\"\r\n            [readonly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Hours\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeHour(-hourStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron bottom\"></span>\r\n            <span class=\"sr-only\">Decrement hours</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"ngb-tp-spacer\">:</div>\r\n        <div class=\"ngb-tp-minute\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeMinute(minuteStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron\"></span>\r\n            <span class=\"sr-only\">Increment minutes</span>\r\n          </button>\r\n          <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\r\n            [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\"\r\n            [readonly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Minutes\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeMinute(-minuteStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron bottom\"></span>\r\n            <span class=\"sr-only\">Decrement minutes</span>\r\n          </button>\r\n        </div>\r\n        <div *ngIf=\"seconds\" class=\"ngb-tp-spacer\">:</div>\r\n        <div *ngIf=\"seconds\" class=\"ngb-tp-second\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeSecond(secondStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron\"></span>\r\n            <span class=\"sr-only\">Increment seconds</span>\r\n          </button>\r\n          <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\r\n            [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\"\r\n            [readonly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Seconds\">\r\n          <button *ngIf=\"spinners\" type=\"button\" class=\"btn btn-link\" [ngClass]=\"setButtonSize()\" (click)=\"changeSecond(-secondStep)\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n            <span class=\"chevron bottom\"></span>\r\n            <span class=\"sr-only\">Decrement seconds</span>\r\n          </button>\r\n        </div>\r\n        <div *ngIf=\"meridian\" class=\"ngb-tp-spacer\"></div>\r\n        <div *ngIf=\"meridian\" class=\"ngb-tp-meridian\">\r\n          <button type=\"button\" class=\"btn btn-outline-primary\" [ngClass]=\"setButtonSize()\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\"\r\n            (click)=\"toggleMeridian()\">{{model?.hour >= 12 ? 'PM' : 'AM'}}</button>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  `,\r\n  providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]\r\n})\r\nexport class NgbTimepicker implements ControlValueAccessor,\r\n    OnChanges {\r\n  disabled: boolean;\r\n  model: NgbTime;\r\n\r\n  /**\r\n   * Whether to display 12H or 24H mode.\r\n   */\r\n  @Input() meridian: boolean;\r\n\r\n  /**\r\n   * Whether to display the spinners above and below the inputs.\r\n   */\r\n  @Input() spinners: boolean;\r\n\r\n  /**\r\n   * Whether to display seconds input.\r\n   */\r\n  @Input() seconds: boolean;\r\n\r\n  /**\r\n   * Number of hours to increase or decrease when using a button.\r\n   */\r\n  @Input() hourStep: number;\r\n\r\n  /**\r\n   * Number of minutes to increase or decrease when using a button.\r\n   */\r\n  @Input() minuteStep: number;\r\n\r\n  /**\r\n   * Number of seconds to increase or decrease when using a button.\r\n   */\r\n  @Input() secondStep: number;\r\n\r\n  /**\r\n   * To make timepicker readonly\r\n   */\r\n  @Input() readonlyInputs: boolean;\r\n\r\n  /**\r\n   * To set the size of the inputs and button\r\n   */\r\n  @Input() size: 'small' | 'medium' | 'large';\r\n\r\n  constructor(config: NgbTimepickerConfig) {\r\n    this.meridian = config.meridian;\r\n    this.spinners = config.spinners;\r\n    this.seconds = config.seconds;\r\n    this.hourStep = config.hourStep;\r\n    this.minuteStep = config.minuteStep;\r\n    this.secondStep = config.secondStep;\r\n    this.disabled = config.disabled;\r\n    this.readonlyInputs = config.readonlyInputs;\r\n    this.size = config.size;\r\n  }\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  writeValue(value) {\r\n    this.model = value ? new NgbTime(value.hour, value.minute, value.second) : new NgbTime();\r\n    if (!this.seconds && (!value || !isNumber(value.second))) {\r\n      this.model.second = 0;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  setDisabledState(isDisabled: boolean) { this.disabled = isDisabled; }\r\n\r\n  changeHour(step: number) {\r\n    this.model.changeHour(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  changeMinute(step: number) {\r\n    this.model.changeMinute(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  changeSecond(step: number) {\r\n    this.model.changeSecond(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateHour(newVal: string) {\r\n    const isPM = this.model.hour >= 12;\r\n    const enteredHour = toInteger(newVal);\r\n    if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\r\n      this.model.updateHour(enteredHour + 12);\r\n    } else {\r\n      this.model.updateHour(enteredHour);\r\n    }\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateMinute(newVal: string) {\r\n    this.model.updateMinute(toInteger(newVal));\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateSecond(newVal: string) {\r\n    this.model.updateSecond(toInteger(newVal));\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  toggleMeridian() {\r\n    if (this.meridian) {\r\n      this.changeHour(12);\r\n    }\r\n  }\r\n\r\n  formatHour(value: number) {\r\n    if (isNumber(value)) {\r\n      if (this.meridian) {\r\n        return padNumber(value % 12 === 0 ? 12 : value % 12);\r\n      } else {\r\n        return padNumber(value % 24);\r\n      }\r\n    } else {\r\n      return padNumber(NaN);\r\n    }\r\n  }\r\n\r\n  formatMinSec(value: number) { return padNumber(value); }\r\n\r\n  setFormControlSize() { return {'form-control-sm': this.size === 'small', 'form-control-lg': this.size === 'large'}; }\r\n\r\n  setButtonSize() { return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'}; }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\r\n      this.model.second = 0;\r\n      this.propagateModelChange(false);\r\n    }\r\n  }\r\n\r\n  private propagateModelChange(touched = true) {\r\n    if (touched) {\r\n      this.onTouched();\r\n    }\r\n    if (this.model.isValid(this.seconds)) {\r\n      this.onChange({hour: this.model.hour, minute: this.model.minute, second: this.model.second});\r\n    } else {\r\n      this.onChange(null);\r\n    }\r\n  }\r\n}\r\n"]}