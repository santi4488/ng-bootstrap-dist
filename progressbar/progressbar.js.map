{"version":3,"file":"progressbar.js","sourceRoot":"","sources":["../../src/progressbar/progressbar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAC,MAAM,eAAe,CAAC;AACxE,OAAO,EAAC,eAAe,EAAC,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAC,oBAAoB,EAAC,MAAM,sBAAsB,CAAC;;;;;IAuDxD,wBAAY,MAA4B;;;;qBAPvB,CAAC;QAQhB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KAC7B;IAED,iCAAQ,GAAR,cAAa,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IAE5D,wCAAe,GAAf,cAAoB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;;gBA7D/D,SAAS,SAAC;oBACT,QAAQ,EAAE,iBAAiB;oBAC3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,meAQT;iBACF;;;;gBAjBO,oBAAoB;;;wBAsBzB,KAAK;6BAML,KAAK;4BAKL,KAAK;8BAKL,KAAK;yBAKL,KAAK;0BAKL,KAAK;2BAKL,KAAK;;yBAvDR;;SAoBa,cAAc","sourcesContent":["import {Component, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {getValueInRange} from '../util/util';\r\nimport {NgbProgressbarConfig} from './progressbar-config';\r\n\r\n/**\r\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\r\n */\r\n@Component({\r\n  selector: 'ngb-progressbar',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div class=\"progress\" [style.height]=\"height\">\r\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\r\n    ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\r\n    [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\r\n        <span *ngIf=\"showValue\">{{getPercentValue()}}%</span><ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class NgbProgressbar {\r\n  /**\r\n   * Maximal value to be displayed in the progressbar.\r\n   */\r\n  @Input() max: number;\r\n\r\n  /**\r\n   * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\r\n   * supporting CSS3 animations, and if striped is true.\r\n   */\r\n  @Input() animated: boolean;\r\n\r\n  /**\r\n   * A flag indicating if a progress bar should be displayed as striped.\r\n   */\r\n  @Input() striped: boolean;\r\n\r\n  /**\r\n   * A flag indicating if the current percentage value should be shown.\r\n   */\r\n  @Input() showValue: boolean;\r\n\r\n  /**\r\n   * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\r\n   */\r\n  @Input() type: string;\r\n\r\n  /**\r\n   * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\r\n   */\r\n  @Input() value = 0;\r\n\r\n  /**\r\n   * Height of the progress bar. Accepts any valid CSS height values, ex. '2rem'\r\n   */\r\n  @Input() height: string;\r\n\r\n  constructor(config: NgbProgressbarConfig) {\r\n    this.max = config.max;\r\n    this.animated = config.animated;\r\n    this.striped = config.striped;\r\n    this.type = config.type;\r\n    this.showValue = config.showValue;\r\n    this.height = config.height;\r\n  }\r\n\r\n  getValue() { return getValueInRange(this.value, this.max); }\r\n\r\n  getPercentValue() { return 100 * this.getValue() / this.max; }\r\n}\r\n"]}